/*
 */

#include "lab08.h"
#include <math.h>

#define MAX_POINTS      500
#define MAX_OPERATIONS  60000
#define MAX_STYLE       256

#define MY_PI 3.14159265358979323846


void escala(int n[],double p[][2], double xScale, double yScale)
{
  int i;
  /* na escala para cada ponto devemos multiplicar a escala desejada para*/
  for (i = 0; i < n[0]; i++)
  {
    p[i][0] =  p[i][0] * xScale ;
    p[i][1] =  p[i][1] * yScale ;
  }
  return;
}
void translacao(int n[],double p[][2],double xTranslate, double yTranslate)
{
  int i;
  /*na translacao para cada ponto devemos adicionar a translacao para sua nova coordenada*/
  for (i = 0; i < n[0]; i++)
  {
    p[i][0]=p[i][0]+xTranslate;
    p[i][1]=p[i][1]+yTranslate;
  }
  return;
}
void rotacao(int n[],double p[][2],double theta)
{
  int i;
  double rotation_angle = theta / 180.0 * MY_PI;

  double x1,y1;

  /* rotaciona todos os pontos do poligono */
  for(i=0;i<n[0];i++)
  {
    x1=p[i][0];
    y1=p[i][1];
    p[i][0] = (x1)*cos(rotation_angle)-(y1)*sin(rotation_angle);
    p[i][1] = (x1)*sin(rotation_angle)+(y1)*cos(rotation_angle);
  }
  return;
}
int main(){

  int i,j;

  /* Variáveis para armazenar todas as operações */
  int    op_n[1];
  double op_p[MAX_OPERATIONS][2];
  char   op_s[MAX_OPERATIONS];
  /* Variáveis que armazenam um polígono */
  int    n[1];
  double p[MAX_POINTS][2];
  char   s[MAX_STYLE];
  /* Variáveis que armazenam a copia de um polígono */
  int    cn[1];
  double cp[MAX_POINTS][2];
  char   cs[MAX_STYLE];
  /* Lendo as operações */
  scan_svg(op_n,op_p,op_s);
  /* Operações armazenadas em (op_n,op_p,op_s) */
  scan_svg(n,p,s);
  while(n[0]>=0)
  {
    /*todas as operacoes a serem realizadas*/
    for(j=0;j<op_n[0];j++)
    {
      /*copia o poligono}*/
      if(op_s[j]=='C')
      {
        /*imprime a ultima copia feita*/
        print_svg(cn,cp,cs);
        /*faz a nova copia*/
        cn[0]=n[0];
        for(i=0;i<MAX_POINTS;i++)
        {
          cp[i][0]=p[i][0];
          cp[i][1]=p[i][1];
        }
        for(i=0;i<MAX_STYLE;i++)
        {
          cs[i]=s[i];
        }
      }
      /*temos uma cadadeia de instrucoes*/
      else
      {
          /*caso a operacao seja escala*/
          if(op_s[j]=='S')
            escala(cn,cp,op_p[j][0],op_p[j][1]);
          /*caso a operacao seja de translacao*/
          else if(op_s[j]=='T')
            translacao(cn,cp,op_p[j][0],op_p[j][1]);
          /*caso a operacao seja de rotacao (dada em graus)*/
          else if(op_s[j]=='R')
            rotacao(cn,cp,op_p[j][0]);
          /*eh erro*/
          else
            printf("ERRO\n");
      }
    }
    /*faz a opearacao para o proximo poligono*/
    scan_svg(n,p,s);
  }
  /*imprime a ultima copia*/
  print_svg(cn,cp,cs);
  close_svg();

	return 0;
}
