/*bibliotecas*/
#include <stdlib.h>
#include <stdio.h>
#include "lab10.h"


typedef struct {
    int instrumento;
    int nota;
    int intensidade;
    int instanteInicial;
    int duracao;
} TpSom;
void insertionSort(TpEvento vet[], int n);
void trocaElementos(TpEvento vet[], int i,int j);
/*le a entrada e devolve o tamanho da entrada e preenche o vetor TpSom*/

/* ordena o vetor usando insertionSort*/
void insertionSort(TpEvento vet[], int n)
{
   int i, chave, j;
   TpEvento aux;
   for (i = 1; i < n; i++)
   {
       chave = vet[i].instante;
       aux.instante = vet[i].instante;
       aux.instrumento = vet[i].instrumento;
       aux.nota = vet[i].nota;
       aux.intensidade = vet[i].intensidade;
       j = i-1;
      /*move os elementos do vetor que sao maiores que a chave
       * para uma posicao maior que a sua atual*/
       while (j >= 0 && vet[j].instante > chave)
       {
           trocaElementos(vet,j+1,j);
           j = j-1;
       }
       vet[j+1].instante = chave;
       vet[j+1].instrumento = aux.instrumento;
       vet[j+1].intensidade = aux.intensidade;
       vet[j+1].nota = aux.nota;
   }
   return;
}
void trocaElementos(TpEvento vet[], int i,int j)
{
  TpEvento aux;
  aux.instante = vet[i].instante;
  aux.instrumento = vet[i].instrumento;
  aux.nota = vet[i].nota;
  aux.intensidade = vet[i].intensidade;
  vet[i].instante = vet[j].instante;
  vet[i].instrumento = vet[j].instrumento;
  vet[i].nota = vet[j].nota;
  vet[i].intensidade = vet[j].intensidade;
  vet[j].instante = aux.instante;
  vet[j].instrumento = aux.instrumento;
  vet[j].nota = aux.nota;
  vet[j].intensidade = aux.intensidade;
  return;
}
/*codigo do programa*/
int main()
{
  /*vetor de eventos*/
  TpSom *entrada;
  /*vetor de eventos*/
  TpEvento *eventos;
  /*variaveis auxiliares*/
  int i,j,tamanho,contaZero;
  int valido;
  /*realiza a leitura dos instrumentos e eventos*/
  int leitura[5];

  valido =0;
  i=0;
  /*realiza as leituras ate o fim do programa*/
  while (contaZero!=5)
  {
    contaZero=0;
    for(i=0; i<5; i++)
    {
      scanf("%d", &leitura[i]);
      if(leitura[i]==0)
        contaZero++;
      /*caso a leitura nao for valida*/
      if(leitura[i]<0 || (i<3 && leitura[i]>128))
        valido=-1;
    }
    /*contaZero!=5 a leitura nao foi 5 zeros, nao eh o fim do programa" */
    i=0;
    if(contaZero!=5)
    {
      /*realoca o vetor com tamanho+1*/
      entrada = (TpSom *) realloc(entrada,sizeof(TpSom) *(tamanho+1));
      entrada[tamanho].instrumento = leitura[i++];
      entrada[tamanho].nota = leitura[i++];
      entrada[tamanho].intensidade = leitura[i++];
      entrada[tamanho].instanteInicial = leitura[i++];
      entrada[tamanho].duracao = leitura[i++];
      tamanho++;
    }

  }
  /*caso a leitura seja valida continua o programa*/

    /*o tamanho do vetor de eventos eh 2 vezes o vetor de entrada, pois cada entrada gera 2 eventos
    um de inicio e outro de fim*/
    eventos = malloc(sizeof(TpEvento)*tamanho*2);
    /*preenchemos entao o vetor de eventos*/
    for(i=0;i<tamanho;i++)
    {
      eventos[i].instrumento = entrada[i].instrumento;
      eventos[i].nota = entrada[i].nota;
      eventos[i].intensidade = entrada[i].intensidade;
      eventos[i].instante = entrada[i].instanteInicial;
      eventos[i+tamanho].instrumento = entrada[i].instrumento;
      eventos[i+tamanho].nota = entrada[i].nota;
      eventos[i+tamanho].intensidade = 0;
      eventos[i+tamanho].instante= entrada[i].duracao+entrada[i].instanteInicial;
    }
  if(valido!=-1)
  {
    /*realiza a ordenacao do vetor de entrada com base nas especificacoes dadas do exercicio
    Sao ordenados por ordem de importancia : Instante > Instrumento menor > Nota Menor > intensidade.*/
    /*ordena o vetor usando instante como parametro do insertionSort*/
    insertionSort(eventos,tamanho*2);
    for(i=0;i<tamanho*2;i++)
    {
      for(j=i+1;j<tamanho*2;j++)
      {

        /*um instante que possui 2 eventos*/
        if(eventos[i].instante == eventos[j].instante)
        {
          /*se neste instante a posicao menor possuir um instrumento maior, troca*/
          if(eventos[i].instrumento > eventos[j].instrumento)
          {
            trocaElementos(eventos,i,j);
            i=0;
            j=0;
          }
          /*se neste instante a posicao menor possuir um mesmo instrumento com nota maior, troca*/
          else if(eventos[i].instrumento == eventos[j].instrumento && eventos[i].nota > eventos[j].nota)
          {
            trocaElementos(eventos,i,j);
            i=0;
            j=0;
          }
          /*um instante com intensidade maior troca*/
          else if(eventos[i].instrumento == eventos[j].instrumento && eventos[i].nota == eventos[j].nota && eventos[i].intensidade > eventos[j].intensidade)
          {
            trocaElementos(eventos,i,j);
            i=0;
            j=0;
          }
        }
      }
    }
    /*chamamos a funcao de eventos*/
    saida(0, tamanho*2, eventos);
  }
  /*leitura invalida*/
  if(valido==-1)
  {
    saida(0,0,eventos);
  }
      
  /*libera a memoria*/
  free(entrada);
  free(eventos);
  /*termina o programa*/
  return 0;
}
