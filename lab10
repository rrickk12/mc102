/*bibliotecas*/
#include <stdlib.h>
#include <stdio.h>
#include "lab10.h"


typedef struct {
    int instrumento;
    int nota;
    int intensidade;
    int instanteInicial;
    int duracao;
} TpSom;


/*codigo do programa*/
int main()
{
  /*vetor de eventos*/
  TpSom *vetorEventos;
  /*vetor de saidaVec*/
  TpEvento *saidaVec,aux;
  /*vetor de entrada*/
  int entrada[5];
  /*variaveis auxiliares*/
  int i,j,flag,sizeEventos,instante;

  /* inicialmente nao sabemos quantal sera o tamanho da musica e quantos eventos
  alocamos inicialmente um vetor de 1 posicao que sera realocado ao longo do
  programa*/
  vetorEventos = malloc(sizeof(TpSom));
  sizeEventos = 1;
  /*lendo a entrada pela primeira vez*/
  for(i=0; i<5; i++)
  {
    scanf(" %d", &entrada[i]);
  }
  /*verifica se a entrada nao eh 0 0 0 0 0 ( fim do programa ) */
  flag = 0;
  for(i=0;i<5;i++)
  {
    if(entrada[i]==0)
      flag++;
  }
  /*se flag != 5 temos que a entrada nao foi "vazia" */
  i=0;
  if(flag!=5)
  {
    vetorEventos[sizeEventos-1].instrumento = entrada[i++];
    vetorEventos[sizeEventos-1].nota = entrada[i++];
    vetorEventos[sizeEventos-1].intensidade = entrada[i++];
    vetorEventos[sizeEventos-1].instanteInicial = entrada[i++];
    vetorEventos[sizeEventos-1].duracao = entrada[i++];
  }
  flag=0;

  /*realiza as proximas leituras ate o fim do programa*/
  while (flag!=5)
  {
    flag=0;
    for(i=0; i<5; i++)
    {
      scanf("%d", &entrada[i]);
    }

    for(i=0 ;i<5;i++)
    {
      if(entrada[i]==0)
        flag++;
    }
    /*se flag != 5 temos que a entrada nao foi "vazia" */
    i=0;
    if(flag!=5)
    {
      /*realoca o vetor com tamanho+1*/
      vetorEventos = (TpSom *) realloc(vetorEventos,sizeof(TpSom) * (sizeEventos + 1));
      vetorEventos[sizeEventos].instrumento = entrada[i++];
      vetorEventos[sizeEventos].nota = entrada[i++];
      vetorEventos[sizeEventos].intensidade = entrada[i++];
      vetorEventos[sizeEventos].instanteInicial = entrada[i++];
      vetorEventos[sizeEventos].duracao = entrada[i++];
      sizeEventos++;
    }
  }
  /*ao terminar a leitura temos o tamanho do vetorEventos sendo assim conseguimos facilmente ordenar por instante*/
  saidaVec = malloc(sizeof(TpEvento)*sizeEventos*2);
  /*vamos assumir que o tempo da musica nao eh infinito, podemos procurar todos os instantes iniciais e finais  do vetorEventos */
  i=0;
  instante=0;
  while(i<sizeEventos*2)
  {
    for(j=0;j<sizeEventos;j++)
    {
      /*procura o final da nota  igual ao da interacao atual*/
      if ((vetorEventos[j].instanteInicial==instante||vetorEventos[j].duracao+vetorEventos[j].instanteInicial==instante)&& vetorEventos[j].duracao!=-1)
      {
        if(vetorEventos[j].intensidade != 0)
        {
          saidaVec[i].instrumento = vetorEventos[j].instrumento;
          saidaVec[i].nota = vetorEventos[j].nota;
          saidaVec[i].intensidade = vetorEventos[j].intensidade;
          saidaVec[i].instante = vetorEventos[j].instanteInicial;
          /*marca a intensidade como 0*/
          vetorEventos[j].intensidade=0;
        }
        else
        {

          saidaVec[i].instrumento = vetorEventos[j].instrumento;
          saidaVec[i].nota = vetorEventos[j].nota;
          saidaVec[i].intensidade = vetorEventos[j].intensidade;
          saidaVec[i].instante= vetorEventos[j].duracao+vetorEventos[j].instanteInicial;
          /*marca a duracao como -1*/
          vetorEventos[j].duracao=-1;
        }
        /*soma 1 no indice do vetor de saidaVec*/
        i++;
        j=0;
      }
      /*procura o instanteInicial igual ao da interacao atual*/

    }
    /*procura o proximo instante*/
    instante++;
  }

  /*temos agora o vetor de saidaVec com os eventos ordenados, podemos liberar a memoria do vetorEventos*/
  free(vetorEventos);

  /*realiza a ordenacao dos eventos simultaneos
  Entre eventos simultâneos na música, eventos com número de instrumento menor, devem estar em posições anteriores no vetor.
  Entre eventos simultâneos no mesmo instrumento, eventos com número de nota menor devem estar em posições anteriores no vetor.*/
  for(i=0;i<sizeEventos*2;i++)
  {
    for(j=i+1;j<sizeEventos*2;j++)
    {
      /*um instante que possui 2 eventos*/
      if(saidaVec[i].instante == saidaVec[j].instante)
      {
          /*se neste instante a posicao menor possuir um instrumento maior, troca*/
          if(saidaVec[i].instrumento > saidaVec[j].instrumento)
          {
            aux.instrumento = saidaVec[i].instrumento;
            aux.nota = saidaVec[i].nota;
            aux.intensidade = saidaVec[i].intensidade;
            saidaVec[i].instrumento = saidaVec[j].instrumento;
            saidaVec[i].nota = saidaVec[j].nota;
            saidaVec[i].intensidade = saidaVec[j].intensidade;
            saidaVec[j].instrumento = aux.instrumento;
            saidaVec[j].nota = aux.nota;
            saidaVec[j].intensidade = aux.intensidade;
            i=0;
            j=0;
          }
          /*se neste instante a posicao menor possuir um mesmo instrumento com nota maior, troca*/
          else if(saidaVec[i].instrumento == saidaVec[j].instrumento && saidaVec[i].nota > saidaVec[j].nota)
          {
            aux.instrumento = saidaVec[i].instrumento;
            aux.nota = saidaVec[i].nota;
            aux.intensidade = saidaVec[i].intensidade;
            saidaVec[i].instrumento = saidaVec[j].instrumento;
            saidaVec[i].nota = saidaVec[j].nota;
            saidaVec[i].intensidade = saidaVec[j].intensidade;
            saidaVec[j].instrumento = aux.instrumento;
            saidaVec[j].nota = aux.nota;
            saidaVec[j].intensidade = aux.intensidade;
            i=0;
            j=0;
          }
      }
    }
  }
  /*chamamos a funcao de saidaVec*/
  saida(0, sizeEventos*2, saidaVec);
  /*libera a memoria do vetor de saidaVec*/
  free(saidaVec);
  /*termina o programa*/
  return 0;
}
